
Serial_Data_Visualizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a46  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081a  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bb  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00001ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:


uint8_t USART_ReceiveByte(){
	while((UCSR0A &(1<<RXC0)) == 0);
	return UDR0;
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <value>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <_Z10USART_Initv>:
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  c0:	88 e9       	ldi	r24, 0x98	; 152
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c6:	08 95       	ret

000000c8 <_Z8adc_initv>:
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ce:	87 e8       	ldi	r24, 0x87	; 135
  d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d4:	08 95       	ret

000000d6 <_Z8adc_readh>:
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	87 70       	andi	r24, 0x07	; 7
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	86 fd       	sbrc	r24, 6
  f2:	fd cf       	rjmp	.-6      	; 0xee <_Z8adc_readh+0x18>
  f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fc:	08 95       	ret

000000fe <_Z14USART_SendBytec>:
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	95 ff       	sbrs	r25, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <_Z14USART_SendBytec+0x4>
 108:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10c:	08 95       	ret

0000010e <main>:



int main()
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	2a 97       	sbiw	r28, 0x0a	; 10
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_result0;
	char int_buffer[10];
	DDRC = 0x01;           // to connect led to PC0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	87 b9       	out	0x07, r24	; 7
	
	// initialize adc and lcd


	USART_Init();
 126:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z10USART_Initv>
	adc_init();
 12a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8adc_initv>
	sei();
 12e:	78 94       	sei
	USART_SendByte(0x49);
 130:	89 e4       	ldi	r24, 0x49	; 73
 132:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte('O');
 136:	8f e4       	ldi	r24, 0x4F	; 79
 138:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte(0b01010100);
 13c:	84 e5       	ldi	r24, 0x54	; 84
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte(45);
 142:	8d e2       	ldi	r24, 0x2D	; 45
 144:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte(0x41);
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte('R');
 14e:	82 e5       	ldi	r24, 0x52	; 82
 150:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte(0x4D);
 154:	8d e4       	ldi	r24, 0x4D	; 77
 156:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	USART_SendByte(0b01011001);
 15a:	89 e5       	ldi	r24, 0x59	; 89
 15c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	80 e7       	ldi	r24, 0x70	; 112
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x58>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x62>
 170:	00 00       	nop
 172:	7e 01       	movw	r14, r28
 174:	ec e0       	ldi	r30, 0x0C	; 12
 176:	ee 0e       	add	r14, r30
 178:	f1 1c       	adc	r15, r1
	


	while(1)
	{
		adc_result0 = adc_read(0);      // read adc value at PA0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8adc_readh>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 180:	4a e0       	ldi	r20, 0x0A	; 10
 182:	be 01       	movw	r22, r28
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__itoa_ncheck>
 18c:	8e 01       	movw	r16, r28
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	1f 4f       	sbci	r17, 0xFF	; 255
		
		itoa(adc_result0, int_buffer, 10);

		for (int c=0; c<=10; c++)
		{
			USART_SendByte(int_buffer[c]);
 192:	f8 01       	movw	r30, r16
 194:	81 91       	ld	r24, Z+
 196:	8f 01       	movw	r16, r30
 198:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14USART_SendBytec>
		adc_result0 = adc_read(0);      // read adc value at PA0
		// read adc value at PA1
		
		itoa(adc_result0, int_buffer, 10);

		for (int c=0; c<=10; c++)
 19c:	0e 15       	cp	r16, r14
 19e:	1f 05       	cpc	r17, r15
 1a0:	c1 f7       	brne	.-16     	; 0x192 <main+0x84>
 1a2:	ff ef       	ldi	r31, 0xFF	; 255
 1a4:	29 e6       	ldi	r18, 0x69	; 105
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	f1 50       	subi	r31, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x9a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0xa4>
 1b2:	00 00       	nop
 1b4:	e2 cf       	rjmp	.-60     	; 0x17a <main+0x6c>

000001b6 <__itoa_ncheck>:
 1b6:	bb 27       	eor	r27, r27
 1b8:	4a 30       	cpi	r20, 0x0A	; 10
 1ba:	31 f4       	brne	.+12     	; 0x1c8 <__itoa_ncheck+0x12>
 1bc:	99 23       	and	r25, r25
 1be:	22 f4       	brpl	.+8      	; 0x1c8 <__itoa_ncheck+0x12>
 1c0:	bd e2       	ldi	r27, 0x2D	; 45
 1c2:	90 95       	com	r25
 1c4:	81 95       	neg	r24
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__utoa_common>

000001cc <__utoa_ncheck>:
 1cc:	bb 27       	eor	r27, r27

000001ce <__utoa_common>:
 1ce:	fb 01       	movw	r30, r22
 1d0:	55 27       	eor	r21, r21
 1d2:	aa 27       	eor	r26, r26
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	aa 1f       	adc	r26, r26
 1da:	a4 17       	cp	r26, r20
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <__utoa_common+0x14>
 1de:	a4 1b       	sub	r26, r20
 1e0:	83 95       	inc	r24
 1e2:	50 51       	subi	r21, 0x10	; 16
 1e4:	b9 f7       	brne	.-18     	; 0x1d4 <__utoa_common+0x6>
 1e6:	a0 5d       	subi	r26, 0xD0	; 208
 1e8:	aa 33       	cpi	r26, 0x3A	; 58
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <__utoa_common+0x20>
 1ec:	a9 5d       	subi	r26, 0xD9	; 217
 1ee:	a1 93       	st	Z+, r26
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	79 f7       	brne	.-34     	; 0x1d2 <__utoa_common+0x4>
 1f4:	b1 11       	cpse	r27, r1
 1f6:	b1 93       	st	Z+, r27
 1f8:	11 92       	st	Z+, r1
 1fa:	cb 01       	movw	r24, r22
 1fc:	0c 94 00 01 	jmp	0x200	; 0x200 <strrev>

00000200 <strrev>:
 200:	dc 01       	movw	r26, r24
 202:	fc 01       	movw	r30, r24
 204:	67 2f       	mov	r22, r23
 206:	71 91       	ld	r23, Z+
 208:	77 23       	and	r23, r23
 20a:	e1 f7       	brne	.-8      	; 0x204 <strrev+0x4>
 20c:	32 97       	sbiw	r30, 0x02	; 2
 20e:	04 c0       	rjmp	.+8      	; 0x218 <strrev+0x18>
 210:	7c 91       	ld	r23, X
 212:	6d 93       	st	X+, r22
 214:	70 83       	st	Z, r23
 216:	62 91       	ld	r22, -Z
 218:	ae 17       	cp	r26, r30
 21a:	bf 07       	cpc	r27, r31
 21c:	c8 f3       	brcs	.-14     	; 0x210 <strrev+0x10>
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
